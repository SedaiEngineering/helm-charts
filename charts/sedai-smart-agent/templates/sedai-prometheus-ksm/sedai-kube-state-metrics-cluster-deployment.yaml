{{- if .Values.sedaiKSM.enabled }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.workload.ksm.name }}"
  namespace: {{ .Values.namespace }}
  labels:    
    {{- include "sedai-smart-agent.labels" . | nindent 4 }} 
spec:
  selector:
    matchLabels:      
      app.kubernetes.io/name: sedai-kube-state-metrics
  replicas: 1
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:        
        app.kubernetes.io/name: sedai-kube-state-metrics
    spec:
      automountServiceAccountToken: true
      hostNetwork: false
      serviceAccountName: "{{ .Values.workload.ksm.name }}-sa"

      {{- with .Values.sedaiKSM.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.sedaiKSM.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: sedai-ksm
        args:
        - --port=8080
        - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
        imagePullPolicy: "{{ .Values.image.ksm.imagePullPolicy }}"
        image: "{{ .Values.image.ksm.repository }}:{{ .Values.image.ksm.imageTag }}"
        resources:
          requests:
            cpu: "{{ .Values.resources.ksm.cpu.requests }}"          
            memory: "{{ .Values.resources.ksm.memory.requests }}"
          limits:
            cpu: "{{ .Values.resources.ksm.cpu.limits }}"
            memory: "{{ .Values.resources.ksm.memory.limits }}"
        ports:
        - containerPort: 8080
          name: "http"
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
  
{{- end }}  